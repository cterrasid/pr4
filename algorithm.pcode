const
    MAX_STUDENTS: integer = 20;      { Max. number of students }
    NUM_ACTIVITIES: integer = 7;     { Max. number of activities of the subject }
    NUM_CAA_ACTIVITIES: integer = 4; { Number of CAA activities }
    NUM_PR_ACTIVITIES: integer = 3;  { Number of PR activities }

    MIN_C_MINUS: real = 3.0;         { Minimum mark for grade C- }
    MIN_C_PLUS: real = 5.0;          { Minimum mark for grade C+ }
    MIN_B: real = 7.0;               { Minimum mark for grade B }
    MIN_A: real = 9.0;               { Minimum mark for grade A }

    CAA1_WEIGHT: integer = 10;       { Percent weight of CAA1 in CAA grade }
    CAA2_WEIGHT: integer = 20;       { Percent weight of CAA2 in CAA grade }
    CAA3_WEIGHT: integer = 30;       { Percent weight of CAA3 in CAA grade }
    CAA4_WEIGHT: integer = 40;       { Percent weight of CAA4 in CAA grade }
    PR1_WEIGHT: integer = 20;        { Percent weight of PR1 in PR grade }
    PR2_WEIGHT: integer = 30;        { Percent weight of PR2 in PR grade }
    PR3_WEIGHT: integer = 50;        { Percent weight of PR3 in PR grade }

    TOTAL_MARKS_WEIGHT: integer = 100;      { Total weight for CAA or PR activities group }
    FINAL_CAA_WEIGHT: integer = 30;         { Final CAA weight }
    FINAL_PR_WEIGHT: integer = 70;          { Final PR weight }
    GRADES_FILE: string = "grades.txt";     { Name of the file to write student's data }
end const

type
    { User defined types }
    tGrade = {A, B, C_PLUS, C_MINUS, D}
    tActivityType = {CAA, PR}
    tActivityName = {CAA1, CAA2, CAA3, CAA4, PR1, PR2, PR3}
    tActivityState = {SUBMITTED, NOT_SUBMITTED, EXCLUDED}

    tActivity = record
        name: tActivityName;    { Activity Name }
        state: tActivityState;  { Activity State }
        mark: real;             { Activity Mark }
    end record

    tStudent = record
        studentId: integer; { Student ID }
        name: string; { Student Name }
        activities: vector[NUM_ACTIVITIES] of tActivity; { Student Activities }
        {Exercise 1}
        caaMark: real;  { Student final CAA mark }
        prMark: real;   { Student final PR mark }
        nCaa: integer;  { Student number of submitted CAA activities }
        nPr: integer;   { Student number of submitted PR activities }
        finalMark: real; { Student final mark }
        absent: boolean; { Student is absent or not }
    end record
    
    tStudentsTable = record
        students: vector[MAX_STUDENTS] of tStudent; { Students info and grades }
        nStudents: integer; { Number of students }
    end record

end type
    
{Exercise 1: 2. Read data from marks file}
action studentsLoadDataFromFile (
    in filename: string,
    out studentsTable: tStudentsTable,
    out isRead: boolean
  )
    var
      fileToRead: file;
      newStudent: tStudent;
      i: integer;
    end var;
    
    { Open the file }
    fileToRead := openFile(filename);
    if fileToRead ≠ NULL then
      { Initialize table }
      studentsTable.nStudents := 0;
  
      while not isEndOfFile(fileToRead) and studentsTable.nStudents < MAX_STUDENTS do
        newStudent.studentId := readIntegerFromFile(fileToRead);
        newStudent.name := readStringFromFile(fileToRead);
        for i := 1 to NUM_ACTIVITIES do
          { Read mark and activity state }
          newStudent.activities[i].mark := readRealFromFile(fileToRead);
          newStudent.activities[i].state := readEnumFromFile(fileToRead);
          { Assign activity name }
           if i := 1 then
               newStudent.activities[i].name := CAA1;
           else
               if i := 2 then
                   newStudent.activities[i].name := CAA2;
               else
                   if i := 3 then
                       newStudent.activities[i].name := CAA3;
                   else
                       if i := 4 then
                           newStudent.activities[i].name := CAA4;
                       else
                           if i := 5 then
                               newStudent.activities[i].name := PR1;
                           else
                               if i := 6 then
                                   newStudent.activities[i].name := PR2;
                               else
                                   newStudent.activities[i].name := PR3;
                               end if
                           end if
                       end if
                   end if
               end if
           end if
            
        end for;
  
        { Add student to students vector }
        studentsTable.students[studentsTable.nStudents] := newStudent;
        { Increment the counter }
        studentsTable.nStudents := studentsTable.nStudents + 1;
      end while;

      { Close the file }
      closeFile(fileToRead);
      isRead := true;
    else
      isRead := false;
    end if;
end action;

{ Action that returns the type of activity and its weight }
action activityTypeWeight (
    in activity: tActivityName,
    out activityType: tActivityType,
    out activityWeight: real
  )
    activityType := CAA;
    if activity = CAA1 then
        activityWeight := integerToReal(CAA1_WEIGHT);
    else
        if activity = CAA2 then
            activityWeight := integerToReal(CAA2_WEIGHT);
        else
            if activity = CAA3 then
                activityWeight := integerToReal(CAA3_WEIGHT);
            else
                if activity = CAA4 then
                    activityWeight := integerToReal(CAA4_WEIGHT);
                else
                    activityType := PR;
                    if activity = PR1 then
                        activityWeight := integerToReal(PR1_WEIGHT);
                    else
                        if activity = PR2 then
                            activityWeight := integerToReal(PR2_WEIGHT);
                        else
                            activityWeight := integerToReal(PR3_WEIGHT);
                        end if
                    end if
                end if
            end if
        end if
    end if
end action

{ Function that check all PR activities are submitted }
function allSubmittedPr (nSubmittedPr: integer): boolean
    return nSubmittedPr = NUM_PR_ACTIVITIES;
end function

{ Exercise 2 }
{ Action to calculate a student's CAA and PR marks and number of activities }
action calculateFinalMarkByActivityType (inout student: tStudent)
    var
        activityType: tActivityType;
        activityWeight: real;
        mark: real;
        i: integer;
    end var
    
    { Initialize variables }
    student.caaMark := 0.0;
    student.prMark := 0.0;
    student.nCaa := 0;
    student.nPr := 0;
    
    for i := 1 to NUM_ACTIVITIES do
        activityTypeWeight(student.activities[i].name, activityType, activityWeight);
        mark := student.activities[i].mark * activityWeight;
        
        if activityType = CAA then
            student.caaMark := student.caaMark + mark;
            if student.activities[i].state = SUBMITTED then
                student.nCaa := student.nCaa + 1;
            end if
        else
            student.prMark := student.prMark + mark;
            if student.activities[i].state = SUBMITTED then
                student.nPr := student.nPr + 1;
            end if
        end if

    end for
    student.caaMark := student.caaMark / TOTAL_MARKS_WEIGHT;
    student.prMark := student.prMark / TOTAL_MARKS_WEIGHT;
end action

{ Exercise 3 }
{ Action that calculates student's final mark and NP registry }
action calculateFinalMark (inout student: tStudent)
    var
        isNotApproved: boolean;
    end var

    { Initialize variables }
    isNotApproved := false;

    { If student's CAA mark is less than 4, final mark will be CAA mark and student is not approved }
    if student.caaMark < 4.0 then
        student.finalMark := student.caaMark;
        isNotApproved := true;
    else
        { If student's PR mark is less than 5, final mark will be PR mark and student is not approved }
        if student.prMark < 5.0 then
            student.finalMark := student.prMark;
            isNotApproved := true;
        else
        { In any other case, final mark will be the weighted average between CAA and PR }
            student.finalMark := (student.caaMark * FINAL_CAA_WEIGHT + student.prMark * FINAL_PR_WEIGHT) / TOTAL_MARKS_WEIGHT;
            { If student is not approved and hasn't submitted all the PR, final mark is 4 }
            if not isNotApproved and not allSubmittedPr(student.nPr) then
                student.finalMark := 4.0;
            end if
        end if
    end if
    { Student is absent when has submitted less than 3 CAA and less than 2 PR }
    student.absent := student.nCaa < 3 and student.nPr < 2;
end action

{ Exercise 4 }
{ Action that writes a student's ID, grade and NP in a file }
action saveAndDisplayStudentsData (in studentsTable: tStudentsTable)
    var
        fileToWrite: file;
        student: tStudent;
        i: integer;
    end var

    { Open the file }
    fileToWrite := openFile(GRADES_FILE);
    
    if studentsTable.nStudents = 0 then
        writeString(“STUDENT LIST EMPTY”);
    else
        for i := 1 to studentsTable.nStudents do
            student := studentsTable.students[i];

            { Write student data into the file }
            writeIntegerToFile(fileToWrite, studentsTable.students[i].studentId);
            writeStringToFile(fileToWrite, studentsTable.students[i].name);
            writeRealToFile(fileToWrite, studentsTable.students[i].caaMark);
            writeRealToFile(fileToWrite, studentsTable.students[i].prMark);
            writeIntegerToFile(fileToWrite, studentsTable.students[i].nCaa);
            writeIntegerToFile(fileToWrite, studentsTable.students[i].nPr);
            writeRealToFile(fileToWrite, studentsTable.students[i].finalMark);
            writeBooleanToFile(fileToWrite, studentsTable.students[i].absent);
        end for
    end if
    { Display student data }
    writeStudentsData(studentsTable);

    { Close the file }
    closeFile(fileToWrite);
end action

{ Exercise 5 }
{ Sort algorithm: Action that order a student's table by mark and student id }
action sortDescendingByFinalMark (inout studentsTable: tStudentsTable)
    var
        i, j, posMin: integer;  { Iteration (i), second position (j) and minimum position (posMin) variables }
        aux: tStudent;          { Auxiliary variable to swap students }
    end var
    
    { Initialize variables }
    i := 1;
    
    { Iterate over the students table }
    while i < studentsTable.nStudents do
        posMin := i;    { posMin is the current position }
        j := i + 1;     { j is the next position to i }

        { Evaluate j position }
        while j <= studentsTable.nStudents do
            { If the student in j has a higher mark than the student in the minimum position }
            if studentsTable.students[j].finalMark > studentsTable.students[posMin].finalMark then
                { Update the minimum position }
                posMin := j;
            else
                { If the student in j position has the same mark as the student in the minimum position }
                if studentsTable.students[j].finalMark = studentsTable.students[posMin].finalMark then
                    { If the student in j position has a lower student id than the student in the minimum position }
                    if studentsTable.students[j].studentId < studentsTable.students[posMin].studentId then
                        { Update the minimum position }
                        posMin := j;
                    end if
                end if
            end if
            { Increment j position }
            j := j + 1;
        end while
        
        { If the minimum position is different from i, swap the students }
        if posMin ≠ i then
            aux := studentsTable.students[posMin];
            studentsTable.students[posMin] := studentsTable.students[i];
            studentsTable.students[i] := aux;
        end if
        i := i + 1;
    end while
    { Display sorted students list }
    writeStudentsData(studentsTable);
end action

{ Exercise 6 }
{ Function that calculates percent of approved students }
function displayApprovedStats (studentsTable: tStudentsTable): real
    var
        approvedStudentsCount, i: integer;
        isApproved: boolean;
        student: tStudent;
    end var
    
    { Initialize variables }
    approvedStudentsCount := 0;

    for i := 1 to studentsTable.nStudents do
        student := studentsTable.students[i];
        isApproved := student.finalMark >= MIN_C_PLUS;
        
        if isApproved and not student.absent then
            approvedStudentsCount := approvedStudentsCount + 1;
        end if
    end for

    if studentsTable.nStudents = 0 then
        return 0.0;
    end if
    
    return (integerToReal(approvedStudentsCount) * 100.0) / integerToReal(studentsTable.nStudents);
end function

{ Exercise 7 }
{ Action that obtains students candidates to honors }
action listStudentsWithHonors (in studentsTable: tStudentsTable, out studentsWithHonorsTable: tStudentsTable)
    var
        i, j: integer;
    end var
    
    { Initialize variables }
    i := 1;
    j := 1;
    studentsWithHonorsTable.nStudents := 0;

    for i := 1 to studentsTable.nStudents do
        if studentsTable.students[i].finalMark >= MIN_A then
            studentsWithHonorsTable.students[j] := studentsTable.students[i];
            j := j + 1;
        end if
    end for

    { Update the number of students in studentsWithHonorsTable }
    studentsWithHonorsTable.nStudents := j - 1;

    writeStudentsData(studentsWithHonorsTable);
end action

{ Exercise 8 }
{ Search algorithm: Check if student is eligible for honors }
function isEligibleForHonors (studentId: integer, studentsWithHonorsTable: tStudentsTable): boolean
    var
        i: integer;
        found: boolean;
    end var
            
    { Initialize variables }
    i := 1;
    found := false;

    while i <= studentsWithHonorsTable.nStudents and not found do
        found := studentsWithHonorsTable.students[i].studentId = studentId;
        i := i + 1;
    end while

    return found;
end function

{ Display student data }
action writeStudentsData (in studentsTable: tStudentsTable)
    var
        i: integer;
    end var
    
    if studentsTable.nStudents = 0 then
        writeString(“STUDENT LIST EMPTY”);
    else
        writeString(ID NAME CAA_MARK PR_MARK N_CAA N_PR FINAL_MARK ABSENT?(1=YES)”);
        writeString(“--------------------------------------------------------------------------------------------------------------------”);

        for i := 1 to studentsTable.nStudents do
            writeInteger(studentsTable.students[i].studentId);
            writeString(studentsTable.students[i].name);
            writeReal(studentsTable.students[i].caaMark);
            writeReal(studentsTable.students[i].prMark);
            writeInteger(studentsTable.students[i].nCaa);
            writeInteger(studentsTable.students[i].nPr);
            writeReal(studentsTable.students[i].finalMark);
            writeBoolean(studentsTable.students[i].absent);
        end for
    end if
end action

algorithm UOCSubjectGrades
    var
        studentsTable, studentsWithHonorsTable: tStudentsTable;
        i, studentId: integer;
        filename: string;
        isRead, found: boolean;
        approvedPercent: real;
    end var

    { Exercise 1 }
    { Load data from file }
    writeString("LOAD DATA FROM FILE. ENTER FILENAME >>");
    filename := readString();
    studentsLoadDataFromFile(filename, studentsTable, isRead);

    if isRead then
        writeString("RESULTS:");
        for i := 1 to studentsTable.nStudents do
            { Exercise 2 }
            calculateFinalMarkByActivityType(studentsTable.students[i]);
            { Exercise 3 }
            calculateFinalMark(studentsTable.students[i]);
        end for
        { Exercise 4 }
        writeString("STUDENTS MARKS");
        writeString("==============");
        saveAndDisplayStudentsData(studentsTable);
        { Exercise 5 }
        writeString("STUDENTS SORTED BY FINAL MARK");
        writeString("=============================");
        sortDescendingByFinalMark(studentsTable);
        { Exercise 6 }
        approvedPercent := displayApprovedStats(studentsTable);
        writeString("Percent students approved: ");
        writeReal(approvedPercent);
        { Exercise 7 }
        writeString("STUDENTS IN HONOR LIST");
        writeString("======================");
        listStudentsWithHonors(studentsTable, studentsWithHonorsTable);
        { Exercise 8 }
        writeString("SELECT STUDENT BY ID >>");
        studentId := readInteger();
        found := isEligibleForHonors(studentId, studentsWithHonorsTable);

        if found then
            writeString("STUDENT IN HONOR LIST");
        else
            writeString("STUDENT NOT IN HONOR LIST");
        end if
    else
        { No data recovered }
        writeString("NO STUDENTS RECOVERED");
    end if
end algorithm